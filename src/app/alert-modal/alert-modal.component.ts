import { Component, Inject, OnInit, ViewChild } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { FormControl, FormGroup, NgForm, Validators } from '@angular/forms';

@Component({
  selector: 'app-alert-modal',
  templateUrl: './alert-modal.component.html',
  styleUrls: ['./alert-modal.component.css']
})
export class AlertModalComponent implements OnInit {

  constructor(@Inject(MAT_DIALOG_DATA) public data: any, private dialogRef: MatDialogRef<AlertModalComponent>) { }

  public navbarTabs = ["Immunization Alerts", "Lab Alerts", "DI Alerts", "Procedure Alerts", "RC Specific Alerts", "DX Specific Alerts", "Patient Specific Alerts"];
  public activeTab = this.navbarTabs[0];
  public filteredAlertTableData: any[] = [];
  public alertTableData: any[] = this.getAlertTableData();
  public tableDataKeys: any[] = this.getTableDataKeys();
  public isAllChecked: boolean = false;
  public listForDeletion: number[] = [];
  public autoGeneratedId: any;
  public sortingOrder: string = 'asc';
  public addDataForm!: FormGroup;



  ngOnInit(): void {
    this.validateAddDataForm();
  }

  public addData(formData: any) {

    const nonCharacterData: boolean = /[^a-z]/i.test(formData.value['dataName']);

    if (this.addDataForm.invalid) {
      alert("Please fill all the values");
    } else if (nonCharacterData) {
      alert("Please provide only characters in the name");
    } else {
      this.addNewDataToTable(formData.value);
      alert("Your Data is added in the table !");
    }
  }

  private addNewDataToTable(newData: any) {

    let newAlertData = {
      "id": this.autoGeneratedId,
      "name": newData.dataName,
      "description": newData.dataDescription,
      "webReference": newData.dataWebReference
    }
    this.alertTableData.unshift(newAlertData);
    this.filteredAlertTableData = this.alertTableData;

    this.addDataForm.reset();
  }

  public closeAlertDialog() {
    this.dialogRef.close();
  }

  public checkAllRows(isCheckedData: any) {
    this.isAllChecked = isCheckedData.target.checked;
  }

  public checkRow(selectedRow: any) {
    if (selectedRow.target.checked) {
      this.listForDeletion.push(selectedRow.target.id);
    } else {
      let index = this.listForDeletion.indexOf(selectedRow.target.id);
      this.listForDeletion.splice(index, 1);
    }
  }

  public deleteSelectedData() {
    if (this.isAllChecked) {
      this.alertTableData = [];
      this.filteredAlertTableData = [];
    } else {
      for (let deleteId of this.listForDeletion) {
        for (let data of this.alertTableData) {
          if (data['id'] == deleteId) {
            let dataIndex = this.alertTableData.indexOf(data);
            this.alertTableData.splice(dataIndex, 1);
          }
        }
      }
      this.filteredAlertTableData = this.alertTableData;
      this.listForDeletion = [];
    }

  }

  public filterAlertTable() {
    let searchedValue = (<HTMLInputElement>document.getElementById('userName')).value;
    console.log(searchedValue);
    this.filteredAlertTableData = this.alertTableData

    if (searchedValue.length > 0) {
      this.filteredAlertTableData = this.getFilteredTableData(this.alertTableData, searchedValue)
    }
  }
  public getSelectedTabData(selectedTab: string) {
    this.activeTab = selectedTab;
  }

  private getTableDataKeys() {
    let keys = []

    for (let key in this.alertTableData[0]) {
      keys.push(key);
    }

    return keys;
  }

  public getFilteredTableData(tableData: any, searchedValue: any) {
    let matchedData = [], i;
    for (i = 0; i < tableData.length; i++) {
      if (tableData[i].name.toUpperCase().match(searchedValue.toUpperCase())) {
        matchedData.push(tableData[i])
      }
    }
    return matchedData;
  }

  public sortTableData() {
    if (this.sortingOrder === 'asc') {
      this.sortingOrder = 'desc';
      this.filteredAlertTableData.sort(compare);
      function compare(a: any, b: any) {
        if (a.name.toUpperCase() < b.name.toUpperCase()) {
          return -1;
        }
        if (a.name.toUpperCase() > b.name.toUpperCase()) {
          return 1;
        }
        return 0;
      }
    } else if (this.sortingOrder === 'desc') {
      this.sortingOrder = 'asc';
      this.filteredAlertTableData.sort(compare);
      function compare(a: any, b: any) {
        if (a.name.toUpperCase() > b.name.toUpperCase()) {
          return -1;
        }
        if (a.name.toUpperCase() < b.name.toUpperCase()) {
          return 1;
        }
        return 0;
      }
    }
  }

  private validateAddDataForm() {
    this.addDataForm = new FormGroup({
      'dataName': new FormControl(null, Validators.required),
      'dataDescription': new FormControl(null, Validators.required),
      'dataWebReference': new FormControl(null, Validators.required)
    })
  }

  private getAlertTableData() {
    let tableData = {
      "data": [
        {
          "id": 1,
          "name": "Andrews Phillip",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "Sam X Williams"
        },
        {
          "id": 2,
          "name": "Dillard Mauleen",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "Andy Anthony"
        },
        {
          "id": 3,
          "name": "Miller Jessica",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "Mark Twian"
        },
        {
          "id": 4,
          "name": "Marcus Brownless",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "Phillip Melo"
        },
        {
          "id": 5,
          "name": "Jake Peralta",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "Andy Anthony"
        },
        {
          "id": 6,
          "name": "Adam Lewy",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "Andy Anthony"
        },
        {
          "id": 7,
          "name": "Anthony Hopkins",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "Terry Christie"
        },
        {
          "id": 8,
          "name": "Sebastian Vettel",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "George Lecrec"
        },
        {
          "id": 9,
          "name": "John Ralfion",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "Andy Anthony"
        },
        {
          "id": 10,
          "name": "Leslie Knope",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "April Ludgate"
        },
        {
          "id": 11,
          "name": "Rom Swanson",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "Andrew Bernard"
        },
        {
          "id": 12,
          "name": "Jimothy Halpert",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "Jack Ryan"
        },
        {
          "id": 13,
          "name": "Michael Scott",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "Prison Mike"
        },
        {
          "id": 14,
          "name": "Walter White",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "Albert S Crews"
        },
        {
          "id": 15,
          "name": "Sheldon Cooper",
          "description": "Contrary to popular belief, Lorem",
          "webReference": "Craig McMullam"
        }
      ]
    }

    this.autoGeneratedId = tableData["data"].length + 1;
    this.filteredAlertTableData = tableData['data']

    return tableData["data"];
  }
}
